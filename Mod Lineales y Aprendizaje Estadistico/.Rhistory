edad <- c(35,27,26,30,33,42,51,35,45,37,43,36,36,56,29,35,37,29,34,29)
df<-data.frame(a.docencia,edad)
df
plot(edad, a.docencia)
a.docencia <- c(3,1,1,2,5,6,12,7,3,10,6,11,4,4,16,4,5,3,5,2)
edad <- c(35,27,26,30,33,42,51,35,45,37,43,36,36,56,29,35,37,29,34,29)
df<-data.frame(a.docencia,edad)
df
plot(df)
a.docencia <- c(3,1,1,2,5,6,12,7,3,10,6,11,4,4,16,4,5,3,5,2)
edad <- c(35,27,26,30,33,42,51,35,45,37,43,36,36,56,29,35,37,29,34,29)
df<-data.frame(a.docencia,edad)
plot(df)
a.docencia <- c(3,1,1,2,5,6,12,7,3,10,6,11,4,4,16,4,5,3,5,2)
edad <- c(35,27,26,30,33,42,51,35,45,37,43,36,36,56,29,35,37,29,34,29)
df<-data.frame(edad,a.docencia)
plot(df)
ggpairs(df[,1:2])
corrs<-rcorr(as.matrix(df))
corrs
Y<-a.docencia
X<-edad
#Función para montaje de modelos lineales
lm(Y~X) -> mod_reg  #Y~X quiere decir que queremos explicar Y en función de X
mod_reg
summary(mod_reg)
plot(edad,a.docencia)
abline(mod_reg)
cor(edad,a.docencia)^2
mod_reg$coefficients
mod_reg$coefficients
mod_reg$coefficients[1]
mod_reg$residuals
mod_no_intercept<-lm(Y~X-1)
mod_no_intercept<-lm(Y~X-1)
mod_no_intercept
mod_no_intercept<-lm(Y~X-1)
summary(mod_no_intercept)
plot(edad,a.docencia)
abline(mod_reg)
plot(edad,a.docencia)
abline(mod_reg)
ablin(mod_no_intercept)
plot(edad,a.docencia)
abline(mod_reg)
abline(mod_no_intercept)
library(ggplot2)
ggplot(df, aes(edad, a.docencia)) + geom_point()
plot(edad,a.docencia)
abline(mod_reg)
abline(mod_no_intercept)
library(ggplot2)
ggplot(df, aes(edad, a.docencia)) + geom_point()
+ geom_abline(mod_reg)
library(ggplot2)
ggplot(df, aes(edad, a.docencia)) + geom_point() +
geom_abline(mod_reg)
library(ggplot2)
ggplot(df, aes(edad, a.docencia)) + geom_point() +
geom_abline()
mod_no_intercept<-lm(Y~X-1)
summary(mod_no_intercept)
mod_reg
mod_no_intercept
summary(mod_reg)
mod_no_intercept
summary(mod_reg)
mod_reg$coefficients[0]
mod_reg$coefficients[1]
mod_no_intercept
mod_reg$coefficients[0]
mod_reg$coefficients[1]
mod_no_intercept
mod_reg$coefficients[0]
mod_reg$coefficients[1]
mod_reg$coefficients[1]
mod_reg$coefficients[2]
library(ggplot2)
ggplot(df, aes(edad, a.docencia)) + geom_point() +
geom_abline(intercept = mod_reg$coefficients[1])
library(ggplot2)
ggplot(df, aes(edad, a.docencia)) + geom_point() +
geom_abline(intercept = 1.308086 )
library(ggplot2)
ggplot(df, aes(edad, a.docencia)) + geom_point() +
geom_abline(intercept = 37, slope = -5)
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
mod_reg$coefficients[1]
mod_reg$coefficients[2]
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
p
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
p + geom_abline(intercept = 20)
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
p + geom_abline(intercept = 5)
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
p + geom_abline(intercept = 3)
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
p + geom_abline()
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
p + geom_smooth(method = "lm", se = FALSE)
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
p + geom_smooth(mod_reg)
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
p + geom_smooth(method = "lm", formula = Y~X)
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
p + geom_smooth(method = "lm", formula = Y~X-1)
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
p + geom_smooth(method = "lm")
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
p + geom_smooth(method = "lm", se = FALSE)
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
p + geom_smooth(method = "lm", se = FALSE, formula = a.docencia ~ edad)
library(ggplot2)
p<-ggplot(df, aes(edad, a.docencia)) + geom_point()
p + geom_smooth(method = "lm", se = FALSE, formula = a.docencia ~ edad -1)
abline(mod_reg)
plot(edad,a.docencia)
abline(mod_reg)
abline(mod_no_intercept)
#Función para pintarlo con ggplot2
library(ggplot2)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
#Función para pintarlo con ggplot2
library(ggplot2)
ggplotRegression <- function (fit) {
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
mod_no_intercept<-lm(Y~X-1)
a.docencia <- c(3,1,1,2,5,6,12,7,3,10,6,11,4,4,16,4,5,3,5,2)
edad <- c(35,27,26,30,33,42,51,35,45,37,43,36,36,56,29,35,37,29,34,29)
df<-data.frame(edad,a.docencia)
plot(df)
library(GGally)
ggpairs(df[,1:2])
corrs<-rcorr(as.matrix(df))
library(GGally)
ggpairs(df[,1:2])
corrs<-rcorr(as.matrix(df))
library(GGally)
library(Hmisc)
corrs<-rcorr(as.matrix(df))
corrs
Y<-a.docencia
X<-edad
#Función para montaje de modelos lineales
lm(Y~X) -> mod_reg  #Y~X quiere decir que queremos explicar Y en función de X
mod_reg
summary(mod_reg)
plot(edad,a.docencia)
abline(mod_reg)
cor(edad,a.docencia)^2
mod_reg$coefficients
mod_reg$coefficients[1]
mod_reg$residuals
mod_no_intercept<-lm(Y~X-1)
summary(mod_no_intercept)
plot(edad,a.docencia)
abline(mod_reg)
abline(mod_no_intercept)
#Función para pintarlo con ggplot2
library(ggplot2)
ggplotRegression <- function (fit) {
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
mod_no_intercept<-lm(Y~X-1)
ggplotRegression(mod_no_intercept)
mod_no_intercept<-lm(Y~X-1)
mod_no_intercept
ggplotRegression(mod_no_intercept)
mod_no_intercept<-lm(Y~X-1)
summary(mod_no_intercept)
ggplotRegression(mod_no_intercept)
mod_no_intercept<-lm(Y~X-1)
summary(mod_no_intercept)
ggplotRegression(mod_reg)
#Función para pintarlo con ggplot2
library(ggplot2)
ggplotRegression <- function (fit) {
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
#"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
summary(mod_no_intercept)
ggplotRegression(mod_reg)
summary(mod_no_intercept)
ggplotRegression(mod_reg)
ggplotRegression(mod_no_intercept)
r2<-lm(a.docencia~edad+I(edad^2))
r2<-lm(a.docencia~edad+I(edad^2))
r2
r2<-lm(a.docencia~edad+I(edad^2))
summary(r2)
r2<-lm(a.docencia~edad+edad^2)
summary(r2)
r2<-lm(a.docencia~edad+I(edad^2))
summary(r2)
r2<-lm(a.docencia~edad+I(edad^2))
summary(r2)
plot(a.docencia~edad)
lines(sort(edad), fitted(r2)[order(edad)], col='red')
nuevosdatos <- data.frame(edad=c(30,40,50))
predict.lm(r2,newdata = nuevosdatos)
r3<-lm(a.docencia~edad+I(edad^2)+I(edad^3))
summary(r3)
plot(a.docencia~edad)
lines(sort(edad), fitted(r3)[order(edad)], col='red')
r3<-lm(a.docencia~edad+I(edad^2)+I(edad^3))
summary(r3)
plot(a.docencia~edad)
lines(r2, col='red')
plot(a.docencia~edad)
lines(edad, fitted(r3)[order(edad)], col='red')
plot(a.docencia~edad)
lines(sort(edad), fitted(r3)[order(edad)], col='red')
plot(a.docencia~edad)
lines(sort(edad), fitted(r2)[order(edad)], col='red')
predict.lm(r3,newdata = nuevosdatos)
r4<-lm(a.docencia~edad+I(edad^2)+I(edad^3)+I(edad^4))
summary(r4)
plot(a.docencia~edad)
lines(sort(edad), fitted(r4)[order(edad)], col='red')
lm(log(a.docencia)~log(edad))->rpot
summary(rpot)
plot(a.docencia~edad)
lines(sort(edad), exp(fitted(rpot)[order(edad)]), col='red')
exp(predict.lm(rpot,newdata = nuevosdatos))
A <- structure(list(Time = c(0, 1, 2, 4, 6, 8, 9, 10, 11, 12, 13,
14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30),
Counts = c(126.6, 101.8, 71.6, 101.6, 68.1, 62.9, 45.5, 41.9,
46.3, 34.1, 38.2, 41.7, 24.7, 41.5, 36.6, 19.6,
22.8, 29.6, 23.5, 15.3, 13.4, 26.8, 9.8, 18.8, 25.9, 19.3)), .Names = c("Time", "Counts"), row.names = c(1L, 2L,
3L, 5L, 7L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 19L, 20L, 21L, 22L, 23L, 25L, 26L, 27L, 28L, 29L, 30L,
31L), class = "data.frame")
attach(A)
attach(A)
summary(exponential.model)
attach(A)
names(A)
exponential.model <- lm(log(Counts)~ Time)
exponential.model <- lm(log(Counts)~ Time)
summary(exponential.model)
timevalues <- seq(0, 30, 0.1)
Counts.exponential2 <- exp(predict(exponential.model,list(Time=timevalues)))
timevalues <- seq(0, 30, 0.1)
Counts.exponential2 <- exp(predict(exponential.model,list(Time=timevalues)))
Counts.exponential2
plot(Time, Counts,pch=16)
lines(timevalues, Counts.exponential2,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
timevalues <- seq(0, 30, 0.1)
Counts.exponential2 <- predict(exponential.model,list(Time=timevalues))
Counts.exponential2
plot(Time, Counts,pch=16)
lines(timevalues, Counts.exponential2,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
timevalues <- seq(0, 30, 0.1)
Counts.exponential2 <- predict(exponential.model,list(Time=timevalues))
Counts.exponential2
timevalues <- seq(0, 30, 0.1)
Counts.exponential2 <- exp(predict(exponential.model,list(Time=timevalues)))
Counts.exponential2
exp(predict.lm(rpot,newdata = nuevosdatos))
predict.lm(rpot,newdata = nuevosdatos)
exp(predict.lm(rpot,newdata = nuevosdatos))
nuevosdatos <- data.frame(edad=c(30,40,50))
predict.lm(rpot,newdata = nuevosdatos)
exp(predict.lm(rpot,newdata = nuevosdatos))  #Ajustamos la predicción con la función exponencial. El modelo te entrena para saber que valores de Y tenemos que pasarle a la función exponencial. La función predict-lm, es genérica. Por tanto tenemos que asjutarla en función del modelo que estamos usando.
1.170792^1.170792
1.170792^2
1.170792^30
#La función exponencial es de la forma e^x, donde e es el número de euler.
num_e<-exp(1)
#La función exponencial es de la forma e^x, donde e es el número de euler.
num_e<-exp(1)
num_e
#La función exponencial es de la forma e^x, donde e es el número de euler.
num_e<-exp(1)
#para x=30, el modelo nos devuelve el valor de Y 1.170792. Si lo ajustamos con la función exponencial
exp(1.170792)
lm(a.docencia~log(edad))->rlog
summary(rlog)
plot(Time, Counts,pch=16)
lines(timevalues, Counts.exponential2,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
plot(a.docencia~edad)
lines(sort(edad), fitted(rlog)[order(edad)], col='red')
predict.lm(rlog,newdata = nuevosdatos)
1+(predict.lm(rlog,newdata = nuevosdatos))
lm(a.docencia~I(1/edad))->rhiper
summary(rhiper)
plot(a.docencia~edad)
lines(sort(edad), fitted(rhiper)[order(edad)], col='red')
predict.lm(rhiper,newdata = nuevosdatos)
predict.lm(rhiper,newdata = nuevosdatos)
lm(I(1/a.docencia)~I(1/edad)) -> rdobleinver
summary(rdobleinver)
df <- read.csv("datos/UD4_N02")
df <- read.csv("datos/UD4_N02.csv")
df <- read.csv("datos/UD4_N02.csv")
df
df <- read.csv("datos/UD4_N02.csv",sep=";")
df
df <- read.csv("datos/UD4_N02.csv",sep=";")
df<-data.frame(df$x,df$y)
df <- read.csv("datos/UD4_N02.csv",sep=";")
plot(df)
df <- read.csv("datos/UD4_N02.csv",sep=";")
plot(df)
df <- read.csv("datos/UD4_N02.csv",sep=";")
df<-data.frame(df$x,df$y)
plot(df)
df <- read.csv("datos/UD4_N02.csv",sep=";")
df<-data.frame(df$x,df$y)
plot(df)
df
data(cars)
help(cars)
head(cars)
data(cars)
help(cars)
head(cars)
class(cars)
class(df)
p = ggplot(df,aes(x=x, y=y))
p
df <- read.csv("datos/UD4_N02.csv",sep=";")
df<-data.frame(df$x,df$y)
plot(df)
df
df <- read.csv("datos/UD4_N02.csv",sep=";")
df<-data.frame(df$df.x,df$df.y)
plot(df)
df <- read.csv("datos/UD4_N02.csv",sep=";")
df<-data.frame(df$df.x,df$y)
df <- read.csv("datos/UD4_N02.csv",sep=";")
df
df <- read.csv("datos/UD4_N02.csv",sep=";")
plot(df)
df <- read.csv("datos/UD4_N02.csv",sep=";")
plot(df)
df$x
df <- read.csv("datos/UD4_N02.csv",sep=";")
df$x
df$y
p = ggplot(df,aes(x,y))
p
p + geom_point(shape=1,position = 'jitter')
p = ggplot(df,aes(x,y))
p + geom_point(shape=1,position = 'jitter') +
scale_x_continuous(limits=c(0, 30)) +
scale_y_continuous(limits=c(0, 150))
p + geom_point(shape=1,position = 'jitter') +
scale_x_continuous(limits=c(0, 3000)) +
scale_y_continuous(limits=c(0, 1500))
p + geom_point(shape=1,position = 'jitter') +
scale_x_continuous(limits=c(0, 3000)) +
scale_y_continuous(limits=c(0, 15000))
p + geom_point(shape=1,position = 'jitter') +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL)
p = ggplot(df,aes(x,y))
p + geom_point(shape=1,position = 'jitter') +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL)
p + geom_point(shape=1,position = 'jitter') +
scale_x_continuous(breaks=c(0, 400, 800, 1200))
p + geom_point(shape=1,position = 'jitter') +
scale_x_continuous()
p + geom_point(shape=1,position = 'jitter')
p + geom_point(shape=1,position = 'jitter') +
scale_x_continuous()
p + geom_point(shape=1,position = 'jitter') +
scale_x_continuous("Engine displacement (L)")
p + geom_point() +
scale_x_continuous("Engine displacement (L)")
p + geom_point()
lineal<-lm(Y~X)
lineal<-lm(Y~X)
summary(lineal)
plot(Y~X)
lines(sort(X), fitted(lineal)[order(X)], col='red')
lineal<-lm(Y~X)
summary(lineal)
p = ggplot(df,aes(x,y))
p + geom_point()
df <- read.csv("datos/UD4_N02.csv",sep=";")
X<-df$x
Y<-df$y
p = ggplot(df,aes(x,y))
p + geom_point()
plot(Y~X)
lines(sort(X), fitted(lineal)[order(X)], col='red')
df <- read.csv("datos/UD4_N02.csv",sep=";")
df
set.seed(0)
x <- runif(100,1,50)
y <- 10+log(3*x)+rnorm(100,sd = 0.4)
dat <- data.frame(x=x,y=y)
write.csv(dat,file = "actreg.csv",row.names=FALSE)
set.seed(0)
x <- runif(100,1,50)
y <- 10+log(3*x)+rnorm(100,sd = 0.4)
dat <- data.frame(x=x,y=y)
dat
p = ggplot(dat,aes(x,y))
p + geom_point()
lineal<-lm(Y~X)
summary(lineal)
set.seed(0)
x <- runif(100,1,50)
y <- 10+log(3*x)+rnorm(100,sd = 0.4)
dat <- data.frame(x=x,y=y)
class(dat)
set.seed(0)
x <- runif(100,1,50)
y <- 10+log(3*x)+rnorm(100,sd = 0.4)
dat <- data.frame(x=x,y=y)
dat
p = ggplot(dat,aes(x,y))
p + geom_point()
lineal<-lm(Y~X)
a.docencia <- c(3,1,1,2,5,6,12,7,3,10,6,11,4,4,16,4,5,3,5,2)
edad <- c(35,27,26,30,33,42,51,35,45,37,43,36,36,56,29,35,37,29,34,29)
df<-data.frame(edad,a.docencia)
plot(df)
a.docencia <- c(3,1,1,2,5,6,12,7,3,10,6,11,4,4,16,4,5,3,5,2)
edad <- c(35,27,26,30,33,42,51,35,45,37,43,36,36,56,29,35,37,29,34,29)
df<-data.frame(edad,a.docencia)
df
plot(df)
set.seed(0)
x <- runif(100,1,50)
y <- 10+log(3*x)+rnorm(100,sd = 0.4)
dat <- data.frame(x=x,y=y)
X<-dat$x
class(X)
Y<-dat$y
Y<-a.docencia
X<-edad
class(X)
#Función para montaje de modelos lineales
lm(Y~X) -> mod_reg  #Y~X quiere decir que queremos explicar Y en función de X
mod_reg
X<-dat$x
Y<-dat$y
X
lineal<-lm(Y~X)
X<-dat$x
Y<-dat$y
lineal<-lm(Y~X)
set.seed(0)
x <- runif(100,1,50)
y <- 10+log(3*x)+rnorm(100,sd = 0.4)
dat <- data.frame(x=x,y=y)
p = ggplot(dat,aes(x,y))
p + geom_point()
X<-dat$x
Y<-dat$y
lineal<-lm(Y~X)
X<-dat$x
Y<-dat$y
lineal<-lm(Y~X)
summary(lineal)
plot(Y~X)
lines(sort(X), fitted(lineal)[order(X)], col='red')
cuad<-lm(Y~X+I(X^2))
summary(cuad)
plot(Y~X)
lines(sort(X), fitted(cuad)[order(X)], col='red')
lrlog<-lm(Y~log(X))
summary(rlog)
plot(Y~X)
lines(sort(X), fitted(lrlog)[order(X)], col='red')
lrlog<-lm(Y~log(X))
summary(lrlog)
install.packages("faraway")
